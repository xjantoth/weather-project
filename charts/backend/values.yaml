# Default values for backend.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: jantoth/weather-backend
  pullPolicy: IfNotPresent
  containerPort: 8000
  # Database connection settings:
  env:
    secret:
      PSQL_DB_USER: "micro"
      PSQL_DB_PASS: "password"
      PSQL_DB_NAME: "microservice"
      PSQL_DB_ADDRESS: "backend-postgresql"
      PSQL_DB_PORT: "5432"
  containerPort: 8000
  # Database connection settings:
  env:
    secret:
      PSQL_DB_USER: "micro"
      PSQL_DB_PASS: "password"
      PSQL_DB_NAME: "microservice"
      PSQL_DB_ADDRESS: "backend-postgresql"
      PSQL_DB_PORT: "5432"
  containerPort: 8000
  # Database connection settings:
  env:
    secret:
      PSQL_DB_USER: "micro"
      PSQL_DB_PASS: "password"
      PSQL_DB_NAME: "microservice"
      PSQL_DB_ADDRESS: "backend-postgresql"
      PSQL_DB_PORT: "5432"
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host:  raspberrypi--weather-monitoring
      paths: ["/api"]
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe: /api/health

readinessProbe: /api/health

postgresql:
  image:
    tag: latest
    debug: true

  global:
    postgresql:
      postgresqlUsername: postgres
      postgresqlPassword: password

  persistence:
    enabled: false

  pgHbaConfiguration: |
    local all all trust
    host all all localhost trust
    host microservice micro 10.42.0.0/16 password

  initdbScripts:
    db-init.sql: |
      CREATE DATABASE microservice;
      CREATE USER micro WITH ENCRYPTED PASSWORD 'password';
      GRANT ALL PRIVILEGES ON DATABASE microservice TO micro;
      ALTER DATABASE microservice OWNER TO micro;


livenessProbe: /api/health

readinessProbe: /api/health

livenessProbe: /api/health

readinessProbe: /api/health
